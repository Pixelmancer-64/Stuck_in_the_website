---
import { getCollection } from "astro:content";

// Layout import — provides basic page elements: <head>, <nav>, <footer> etc.
import No_nav_layout from "../layouts/no_nav.astro";

// Component Imports
import Hero from "../components/Hero.astro";
import Pill from "../components/Pill.astro";
import { Icon } from "astro-icon";

// Page section components
import Skills from "../components/Skills.astro";
import Nav from "../components/Nav.astro";

// Content Fetching: List four most recent projects projects
const projects = (await getCollection("projects"))
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
  .slice(0, 4);

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<No_nav_layout>
  <header class="hero">
    <Hero title="Hi, I'm Hugo Billé" tagline="I code cool stuff" align="start">
      <div class="roles">
        <Pill><Icon name="tabler:code" size="1.33em" />Developer</Pill>
        <Pill><Icon name="tabler:plant" size="1.33em" />Gardner</Pill>
        <Pill><Icon name="tabler:math" size="1.33em" />Math lover</Pill>
      </div>
    </Hero>

    <canvas id="canvas" aria-label="Background lighthouse animation" role="img"
    ></canvas>
  </header>

  <main class="">
    <Skills />
  </main>
  
</No_nav_layout>

<style>
  main {
    max-width: 1280px;
    margin: 48px 32px;
    gap: 32px;
  }

  .hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
    height: 100%;
    position: relative;
  }

  #canvas {
    position: absolute;
    z-index: -1;
    width: 100%;
    height: 100%;
  }

  .roles {
    display: none;
  }

  .hero img {
    aspect-ratio: 5 / 4;
    object-fit: cover;
    object-position: top;
    border-radius: 1.5rem;
    box-shadow: var(--shadow-md);
  }

  @media (min-width: 50em) {
    .hero {
      display: grid;
      grid-template-columns: 6fr 4fr;
      padding-inline: 2.5rem;
      gap: 3.75rem;
    }

    .roles {
      margin-top: 0.5rem;
      display: flex;
      gap: 0.5rem;
    }

    .hero img {
      aspect-ratio: 3 / 4;
      border-radius: 4.5rem;
      object-fit: cover;
    }
  }

  /* ====================================================== */

  .section {
    display: grid;
    gap: 2rem;
  }

  .with-background {
    position: relative;
  }

  .with-background::before {
    --hero-bg: var(--bg-image-subtle-2);

    content: "";
    position: absolute;
    pointer-events: none;
    left: 50%;
    width: 100vw;
    aspect-ratio: calc(2.25 / var(--bg-scale));
    top: 0;
    transform: translateY(-75%) translateX(-50%);
    background: url("/assets/backgrounds/noise.png") top center/220px repeat,
      var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
      var(--gray-999);
    background-blend-mode: overlay, normal, normal, normal;
    mix-blend-mode: var(--bg-blend-mode);
    z-index: -1;
  }

  .with-background.bg-variant::before {
    --hero-bg: var(--bg-image-subtle-1);
  }

  .section-header {
    justify-self: center;
    text-align: center;
    max-width: 50ch;
    font-size: var(--text-md);
    color: var(--gray-300);
  }

  .section-header h3 {
    font-size: var(--text-2xl);
  }

  @media (min-width: 50em) {
    .section {
      grid-template-columns: repeat(4, 1fr);
      grid-template-areas: "header header header header" "gallery gallery gallery gallery";
      gap: 5rem;
    }

    .section.with-cta {
      grid-template-areas: "header header header cta" "gallery gallery gallery gallery";
    }

    .section-header {
      grid-area: header;
      font-size: var(--text-lg);
    }

    .section-header h3 {
      font-size: var(--text-4xl);
    }

    .with-cta .section-header {
      justify-self: flex-start;
      text-align: left;
    }

    .gallery {
      grid-area: gallery;
    }

    .cta {
      grid-area: cta;
    }
  }

  .mention-card {
    display: flex;
    height: 7rem;
    justify-content: center;
    align-items: center;
    text-align: center;
    border: 1px solid var(--gray-800);
    border-radius: 1.5rem;
    color: var(--gray-300);
    background: var(--gradient-subtle);
    box-shadow: var(--shadow-sm);
  }

  @media (min-width: 50em) {
    .mention-card {
      border-radius: 1.5rem;
      height: 9.5rem;
    }
  }
</style>

<script>
  const canvas = document.querySelector("#canvas")! as HTMLCanvasElement;
  const ctx = canvas.getContext("2d")!;
  const parentNode = canvas.parentNode! as HTMLElement;

  canvas.width = parentNode.clientWidth;
  canvas.height = parentNode.clientHeight;

  interface Pixel {
    x: number;
    y: number;
    size: number;
    color: string;
    direction: { x: number; y: number };
    angle: number;
  }

  let pixels: Array<Pixel> = [];

  for (let i = 0; i < 1000; i++) {
    pixels.push(
      create_pixel(
        Math.random() * canvas.width - canvas.width * 1.1,
        Math.random() * canvas.height,
        50
      )
    );
    draw_pixel(pixels[i]);
  }

  let animation;
  animation_loop();

  function animation_loop() {
    animation = requestAnimationFrame(animation_loop);

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    pixels.forEach((pixel, index) => {
      update_pixel(pixel);
      draw_pixel(pixel);

      if (pixel.size <= 0.5) {
        pixels.splice(index, 1);
      }
    });

    if (pixels.length == 0) {
      cancelAnimationFrame(animation);
    }
  }

  function create_pixel(x: number, y: number, size: number): Pixel {
    return {
      x: x,
      y: y,
      size: size,
      color: create_random_color(),
      direction: { x: 1, y: 1 },
      angle: Math.random() * 2 - 1,
    };
  }

  function draw_pixel(pixel: Pixel): void {
    ctx.fillStyle = pixel.color;
    ctx.beginPath();
    ctx.rect(pixel.x, pixel.y, pixel.size, pixel.size);
    ctx.fill();
  }

  function update_pixel(pixel: Pixel): void {
    pixel.x += Math.cos(pixel.angle) * (0.25 * pixel.size) * pixel.direction.x;
    pixel.y += Math.sin(pixel.angle) * pixel.direction.y;
    pixel.size -= Math.random() * 0.3 + 0.001;
    pixel.angle += pixel.angle * 0.002;
  }

  function create_random_color() {
    return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${
      Math.random() * 255
    })`;
  }
</script>
